name: Docker Build and Push

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and tag Docker image
        run: |
          docker build -t strapi-app:latest -t duggana1994/strapi-app:${{ github.sha }} .
          docker push duggana1994/strapi-app:${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Render new ECS Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: karthik-strapi
          image: duggana1994/strapi-app:${{ github.sha }}
      
      - name: Create CodeDeploy Deployment
        run: |
          # 1. Register a new ECS Task Definition
          # The 'render-task-def' action saves the rendered task definition JSON to a temporary file.
          RENDERED_TASK_DEFINITION_PATH=${{ steps.render-task-def.outputs.task-definition }}
          
          # Use the AWS CLI to register the new task definition to get its new ARN.
          NEW_TASK_DEF_RESPONSE=$(aws ecs register-task-definition --cli-input-json file://${RENDERED_TASK_DEFINITION_PATH})
          
          # Extract the new Task Definition ARN using 'jq'
          NEW_TASK_DEFINITION_ARN=$(echo "$NEW_TASK_DEF_RESPONSE" | jq -r '.taskDefinition.taskDefinitionArn')
          
          echo "Registered new Task Definition ARN: $NEW_TASK_DEFINITION_ARN"

          # 2. Create the CodeDeploy AppSpec file dynamically
          # This step is NECESSARY to inject the new, correct Task Definition ARN.
          cat <<EOF >appspec.yaml
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $NEW_TASK_DEFINITION_ARN
                  LoadBalancerInfo:
                    ContainerName: "karthik-strapi"  # <--- VERIFY THIS CONTAINER NAME
                    ContainerPort: 1337                # <--- VERIFY THIS PORT
          EOF

          # 3. Upload the dynamically created AppSpec file to your S3 bucket
          aws s3 cp appspec.yaml s3://karthikduggana-strapi/appspec.yaml --region us-east-1

          # 4. Create the CodeDeploy deployment using the S3 location
          aws deploy create-deployment \
            --application-name karthik-codedeploy-app \
            --deployment-group-name karthik-deployment-group \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --s3-location bucket=karthikduggana-strapi,key=appspec.yaml,bundleType=YAML \
            --description "Deployed from GitHub Actions with SHA ${{ github.sha }}"
        shell: /usr/bin/bash -e {0}